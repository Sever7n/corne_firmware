/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | RPT  |
// |  TAB |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  | RET  |
// | CTRL |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ALT  |
//                    | SPC | SYM | GUI |   |SHIFT| NUM  | DEL |
                        bindings = <
   &kp ESC   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &key_repeat
   &kp TAB   &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp RET
   &sk LCTRL &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &sk RALT
                  &sk LGUI &sl 2 &kp SPACE   &sk SHIFT &sl 1 &kp BKSP
                        >;
                };
                number_layer {
                        bindings = <
   &trans    &kp FN1  &kp FN2  &kp FN3 &kp FN4   &kp FN5 &kp FN6 &kp FN7 &kp FN8 &kp FN9 &kp FN10 &trans
   &trans    &kp N1   &kp N2   &kp N3  &kp N4    &kp N5  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0   &trans
   &trans    &kp FN11 &kp FN12 &none   &none     &none   &none   &none   &none   &none   &none    &trans
                         &trans &trans &trans    &trans  &trans   &trans
                        >;
                };

                symbol_layer {
                        bindings = <
   &trans &kp EXCL &kp AT   &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &none &none &trans
   &trans &trans   &kp LBRC &kp LBKT &kp LPAR &kp BSLH    &kp PIPE  &kp RPAR  &kp RBKT        &kp RBKT &kp BSLH &trans
   &trans &kp KP_EQUAL   &kp KP_PLUS   &kp LT   &kp TILDE   &none      &none &kp FSLH  &kp GT        &kp MINUS &kp UNDER &trans
                             &trans &trans   &trans   &trans   &trans    &trans
                        >;
                };
        };
};
